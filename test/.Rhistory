file.exists("diabetes_md.csv")
my_data <- read.table("/diabetes_md.csv")
getwd()
file.exists("diabetes_md.csv")
file.exists("diabetes-md.csv")
my_data <- read.table("/diabetes-md.csv")
my_data <- read.csv("diabetes-md.csv")
my_data #show my dataframe
str(my_data) #show the structure of my_data dataframe
class(my_data) #show the class of my_data dataframe
colnames <- c(Patient name, NI address, Type, Age, Health status)
colnames <- c("Patient name", "NI address", "Type, Age", "Health status")
colnames(my_data) <- colnames
my_data
TypeCategory <- factor(my_data$Type, order = TRUE, levels = c("Type 1", "Type 2")) #refactor type1 and type2 sorting them from lower to higher levels
HealthStatusCategory <- factor(my_data$Health status, order = TRUE, levels = c("Poor", "Improved", "Excellent")) #refactory health status from lower to higher levels
HealthStatusCategory <- factor(my_data$"Health status", order = TRUE, levels = c("Poor", "Improved", "Excellent")) #refactory health status from lower to higher levels
str(my_data)
colnames <- c("Patient name", "NI address", "Type", "Age", "Health status")
colnames(my_data) <- colnames
my_data
#3) Refactor diabetes type and status attributes
TypeCategory <- factor(my_data$Type, order = TRUE, levels = c("Type 1", "Type 2")) #refactor type1 and type2 sorting them from lower to higher levels
HealthStatusCategory <- factor(my_data$"Health status", order = TRUE, levels = c("Poor", "Improved", "Excellent")) #refactory health status from lower to higher levels
str(my_data)
HealthStatusCategory
TypeCategory
patient_names <- my_data$`Patient name`
patient_names
head(patient_names)
head(patient_names=10)
head(patient_names,10)
sum(is.na(my_data))
sum(is.""(my_data))
sum[my_data == ""]
my_data[my_data == ""]
sum(my_data[my_data == ""])
count.fields(my_data[my_data == ""])
count.fields[my_data == ""]
sum.my_data[my_data == ""]
sum(my_data[my_data == ""])
sum[my_data[my_data == ""]]
sum(is.empty.model(my_data))
sum(is.empty(my_data))
sum(is.na(my_data))
sum(is.na(my_data == ""))
sum(is(my_data == ""))
sum(my_data == "")
length(my_data == "")
length(is.na(my_data))
lenght[my_data[my_data == ""]]
length(is.na(my_data))
length(my_data == " ")
lenght[my_data[my_data == " "]]
length[my_data == " "]
length(is.na(my_data))
my_data
sum(is.na(my_data))
sum(is.na(my_data == ""))
sum(is.na(my_data == " "))
sum(is.na(my_data == NULL))
sum(is.na(my_data == 0))
sum(is.na(my_data == empty))
my_data[!complete.cases(my_data),]
my_data[!complete.cases(my_data == ""),]
sum(is.blank(my_data))
sum(is.whitespace(my_data))
my_data = rowSums(is.na(my_data) | my_data == "" | my_data == " "))
my_data = rowSums(is.na(my_data) | my_data == "" | my_data == " ")
my_data
rowSums(is.na(my_data) | my_data == "" | my_data == " ")
lenth(is.na(my_data) | my_data == "" | my_data == " ")
length(is.na(my_data) | my_data == "" | my_data == " ")
length(is.na(my_data == "" | my_data == " "))
length(my_data == "" | my_data == " ")
getwd() #check where my working directory is so that I can save my .csv file there.
file.exists("diabetes-md.csv") #check whether it can find my file in the directory
my_data <- read.csv("diabetes-md.csv") # import my csv file into my_data directory
my_data #show my dataframe
#2) show the structure and class type of my_data and configure the neames of the attributes to: Patient name, NI address, Type, Age, Health status.
str(my_data) #show the structure of my_data dataframe
class(my_data) #show the class of my_data dataframe
colnames <- c("Patient name", "NI address", "Type", "Age", "Health status")
colnames(my_data) <- colnames
my_data
#3) Refactor diabetes type and status attributes
TypeCategory <- factor(my_data$Type, order = TRUE, levels = c("Type 1", "Type 2")) #refactor type1 and type2 sorting them from lower to higher levels
HealthStatusCategory <- factor(my_data$"Health status", order = TRUE, levels = c("Poor", "Improved", "Excellent")) #refactor health status from lower to higher levels
TypeCategory #check Levels to see if they are ordered from lower to higher
HealthStatusCategory #check levels to see if they are ordered from lower to higher
#4) Create a copy of the Patient name attribute into a data frame called patient_names. Show the first 10 names contained in patient_names
patient_names <- my_data$`Patient name` # copy the names from Patient name attribute and save them in patient_names
head(patient_names, 10) # show the first 10 names in patient_names
#5) Couint missing values in data frame my_data, and count this.
#length(my_data == " ")
#length[my_data == " "]
#sum(is.whitespace(my_data))
#my_data[!complete.cases(my_data == ""),]
length(my_data == "" | my_data == " ")
my_data
sum(my_data == "" | my_data == " ")
lengths(my_data == "" | my_data == " ")
length(my_data == "" | my_data == " ")
sum(my_data == "" | my_data == " ")
count.fields(my_data == "" | my_data == " ")
count.fields(my_data == "")
count(my_data == "" | my_data == " ")
length(my_data[my_data == ''])
length(my_data[my_data == '']) <- NA
my_data[my_data == ''] <- NA
my_data
length(my_data[my_data == ''])
my_data[my_data == ''] <- NA
length(my_data[my_data == ''])
my_data <- my_data[my_data == ''] <- NA
my_data
length(my_data[my_data == ''])
getwd() #check where my working directory is so that I can save my .csv file there.
file.exists("diabetes-md.csv") #check whether it can find my file in the directory
my_data <- read.csv("diabetes-md.csv") # import my csv file into my_data directory
my_data #show my dataframe
#2) show the structure and class type of my_data and configure the neames of the attributes to: Patient name, NI address, Type, Age, Health status.
str(my_data) #show the structure of my_data dataframe
class(my_data) #show the class of my_data dataframe
colnames <- c("Patient name", "NI address", "Type", "Age", "Health status")
colnames(my_data) <- colnames
my_data
#3) Refactor diabetes type and status attributes
TypeCategory <- factor(my_data$Type, order = TRUE, levels = c("Type 1", "Type 2")) #refactor type1 and type2 sorting them from lower to higher levels
HealthStatusCategory <- factor(my_data$"Health status", order = TRUE, levels = c("Poor", "Improved", "Excellent")) #refactor health status from lower to higher levels
TypeCategory #check Levels to see if they are ordered from lower to higher
HealthStatusCategory #check levels to see if they are ordered from lower to higher
#4) Create a copy of the Patient name attribute into a data frame called patient_names. Show the first 10 names contained in patient_names
patient_names <- my_data$`Patient name` # copy the names from Patient name attribute and save them in patient_names
head(patient_names, 10) # show the first 10 names in patient_names
#5) Count missing values in data frame my_data, and count this.
length(my_data[my_data == '']) #count missing values in the data frame
#6) In this step instead of removing, I'm replacing the missing valus from my_data dataframe 
my_data[my_data == ''] <- NA
my_data
sum(is.na(my_data))
sum(is.!na(my_data))
sum(!is.na(my_data))
na.omit(my_data)
sum(!is.na(my_data))
length(!is.na(my_data))
nrow(my_data)
dim.data.frame(my_data)
dim(my_data)
Summary(my_data)
summary(my_data)
sum(is.na(my_data))
sum(!is.na(my_data))
length(!is.na(my_data))
my_data(!is.na(my_data))
(!is.na(my_data))
rownames(my_data) = 1:dim(my_data)[1]
my_data
my_data[my_data == ''] <- NA
na.omit(my_data)
rownames(my_data) = 1:dim(my_data)[1]
my_data
my_data[my_data == ''] <- NA
na.omit(my_data)
my_data[my_data == ''] <- NA
my_data <- na.omit(my_data) #keep all the records with no empty cells or NA's
my_data
nrows(my_data)
nrow(my_data)
getwd() #check where my working directory is so that I can save my .csv file there.
file.exists("diabetes-md.csv") #check whether it can find my file in the directory
my_data <- read.csv("diabetes-md.csv") # import my csv file into my_data directory
getwd() #check where my working directory is so that I can save my .csv file there.
file.exists("diabetes-md.csv") #check whether it can find my file in the directory
my_data <- read.csv("diabetes-md.csv") # import my csv file into my_data directory
my_data #show my dataframe
#2) show the structure and class type of my_data and configure the neames of the attributes to: Patient name, NI address, Type, Age, Health status.
str(my_data) #show the structure of my_data dataframe
class(my_data) #show the class of my_data dataframe
colnames <- c("Patient name", "NI address", "Type", "Age", "Health status")
colnames(my_data) <- colnames
getwd() #check where my working directory is so that I can save my .csv file there.
file.exists("diabetes-md.csv") #check whether it can find my file in the directory
my_data <- read.csv("diabetes-md.csv") # import my csv file into my_data directory
my_data #show my dataframe
#2) show the structure and class type of my_data and configure the neames of the attributes to: Patient name, NI address, Type, Age, Health status.
str(my_data) #show the structure of my_data dataframe
class(my_data) #show the class of my_data dataframe
colnames <- c("Patient name", "NI address", "Type", "Age", "Health status") #create a vector with the column names
colnames(my_data) <- colnames #apply the column names to my_data dataframe
head(my_data) #display first 5 rows, so that we can check that the column names have changed.
#3) Refactor diabetes type and status attributes
TypeCategory <- factor(my_data$Type, order = TRUE, levels = c("Type 1", "Type 2")) #refactor type1 and type2 sorting them from lower to higher levels
HealthStatusCategory <- factor(my_data$"Health status", order = TRUE, levels = c("Poor", "Improved", "Excellent")) #refactor health status from lower to higher levels
TypeCategory #check Levels to see if they are ordered from lower to higher
head(HealthStatusCategory) #check levels to see if they are ordered from lower to higher
#4) Create a copy of the Patient name attribute into a data frame called patient_names. Show the first 10 names contained in patient_names
head(TypeCategory) #check Levels to see if they are ordered from lower to higher
head(HealthStatusCategory) #check levels to see if they are ordered from lower to higher
#4) Create a copy of the Patient name attribute into a data frame called patient_names. Show the first 10 names contained in patient_names
patient_names <- my_data$`Patient name` # copy the names from Patient name attribute and save them in patient_names
head(patient_names, 10) # show the first 10 names in patient_names
#5) Count missing values in data frame my_data, and count this.
length(my_data[my_data == '']) #count missing values in the data frame
#6) In this step instead of removing, I'm replacing the missing valus from my_data dataframe 
#6) I'm replacing the missing values in my_data dataframe and then removing the rows with NA values.
my_data[my_data == ''] <- NA #replace all empty fields with NA
my_data <- na.omit(my_data) #keep all the records with no empty cells or NA's
nrow(my_data) #count how many records are left.
nrow(my_data) #count how many records are left.
(my_data[my_data == '']) <- NA #replace all empty fields with NA
getwd() #check where my working directory is so that I can save my .csv file there.
file.exists("diabetes-md.csv") #check whether it can find my file in the directory
my_data <- read.csv("diabetes-md.csv") # import my csv file into my_data directory
my_data #show my dataframe
#2) show the structure and class type of my_data and configure the neames of the attributes to: Patient name, NI address, Type, Age, Health status.
str(my_data) #show the structure of my_data dataframe
class(my_data) #show the class of my_data dataframe
colnames <- c("Patient name", "NI address", "Type", "Age", "Health status") #create a vector with the column names
colnames(my_data) <- colnames #apply the column names to my_data dataframe
head(my_data) #display first 5 rows, so that we can check that the column names have changed.
#3) Refactor diabetes type and status attributes
TypeCategory <- factor(my_data$Type, order = TRUE, levels = c("Type 1", "Type 2")) #refactor type1 and type2 sorting them from lower to higher levels
HealthStatusCategory <- factor(my_data$"Health status", order = TRUE, levels = c("Poor", "Improved", "Excellent")) #refactor health status from lower to higher levels
head(TypeCategory) #check Levels to see if they are ordered from lower to higher
head(HealthStatusCategory) #check levels to see if they are ordered from lower to higher
#4) Create a copy of the Patient name attribute into a data frame called patient_names. Show the first 10 names contained in patient_names
patient_names <- my_data$`Patient name` # copy the names from Patient name attribute and save them in patient_names
head(patient_names, 10) # show the first 10 names in patient_names
#5) Count missing values in data frame my_data, and count this.
colSums(is.na(my_data) ¦ my_data == "")
colSums(is.na(my_data) | my_data == "")
col(is.na(my_data) | my_data == "") -> my_data
nrow(my_data) #count how many records are left.
my_data <- na.omit(my_data | my_data == "") #keep all the records with no empty cells or NA's
nrow(my_data) #count how many records are left.
col(is.na(my_data) | my_data == "") -> my_data
my_data <- na.omit(my_data) #keep all the records with no empty cells or NA's
nrow(my_data) #count how many records are left.
getwd() #check where my working directory is so that I can save my .csv file there.
file.exists("diabetes-md.csv") #check whether it can find my file in the directory
my_data <- read.csv("diabetes-md.csv") # import my csv file into my_data directory
my_data #show my dataframe
#2) show the structure and class type of my_data and configure the neames of the attributes to: Patient name, NI address, Type, Age, Health status.
str(my_data) #show the structure of my_data dataframe
class(my_data) #show the class of my_data dataframe
colnames <- c("Patient name", "NI address", "Type", "Age", "Health status") #create a vector with the column names
colnames(my_data) <- colnames #apply the column names to my_data dataframe
head(my_data) #display first 5 rows, so that we can check that the column names have changed.
#3) Refactor diabetes type and status attributes
TypeCategory <- factor(my_data$Type, order = TRUE, levels = c("Type 1", "Type 2")) #refactor type1 and type2 sorting them from lower to higher levels
HealthStatusCategory <- factor(my_data$"Health status", order = TRUE, levels = c("Poor", "Improved", "Excellent")) #refactor health status from lower to higher levels
head(TypeCategory) #check Levels to see if they are ordered from lower to higher
head(HealthStatusCategory) #check levels to see if they are ordered from lower to higher
#4) Create a copy of the Patient name attribute into a data frame called patient_names. Show the first 10 names contained in patient_names
patient_names <- my_data$`Patient name` # copy the names from Patient name attribute and save them in patient_names
head(patient_names, 10) # show the first 10 names in patient_names
#5) Count missing values in data frame my_data, and count this.
length(my_data[my_data == '']) #count missing values in the data frame
#6) I'm replacing the missing values in my_data dataframe and then removing the rows with NA values.
my_data[my_data == ''] <- NA #replace all empty fields with NA
my_data <- na.omit(my_data) #keep all the records with no empty cells or NA's
nrow(my_data) #count how many records are left.
getwd() #check where my working directory is so that I can save my .csv file there.
file.exists("diabetes-md.csv") #check whether it can find my file in the directory
my_data <- read.csv("diabetes-md.csv") # import my csv file into my_data directory
my_data #show my dataframe
#2) show the structure and class type of my_data and configure the neames of the attributes to: Patient name, NI address, Type, Age, Health status.
str(my_data) #show the structure of my_data dataframe
class(my_data) #show the class of my_data dataframe
colnames <- c("Patient name", "NI address", "Type", "Age", "Health status") #create a vector with the column names
colnames(my_data) <- colnames #apply the column names to my_data dataframe
head(my_data) #display first 5 rows, so that we can check that the column names have changed.
#3) Refactor diabetes type and status attributes
TypeCategory <- factor(my_data$Type, order = TRUE, levels = c("Type 1", "Type 2")) #refactor type1 and type2 sorting them from lower to higher levels
HealthStatusCategory <- factor(my_data$"Health status", order = TRUE, levels = c("Poor", "Improved", "Excellent")) #refactor health status from lower to higher levels
head(TypeCategory) #check Levels to see if they are ordered from lower to higher
head(HealthStatusCategory) #check levels to see if they are ordered from lower to higher
#4) Create a copy of the Patient name attribute into a data frame called patient_names. Show the first 10 names contained in patient_names
patient_names <- my_data$`Patient name` # copy the names from Patient name attribute and save them in patient_names
class(patient_names) #check that patient_names is class data.frame
head(patient_names, 10) # show the first 10 names in patient_names
#5) Count missing values in data frame my_data, and count this.
length(my_data[my_data == '']) #count missing values in the data frame
blankrecords <- colSums(is.na(my_data) | my_data == "")
blankrecords #sho the records that are blank
blankrecords <- col(is.na(my_data) | my_data == "")
blankrecords #sho the records that are blank
blankrecords <- length(my_data[my_data == '']) #count missing values in the data frame
blankrecords #sho the records that are blank
blankrecords <- (my_data[my_data == '']) #count missing values in the data frame
#blankrecords <- col(is.na(my_data) | my_data == "")
blankrecords #sho the records that are blank
#Lab practial 1 - Importing Diabetes data into data frame
#1) Import the diabetes data available on Blackboard called diabetes-md into new data frame called my_data
getwd() #check where my working directory is so that I can save my .csv file there.
file.exists("diabetes-md.csv") #check whether it can find my file in the directory
my_data <- read.csv("diabetes-md.csv") # import my csv file into my_data directory
#Lab practial 1 - Importing Diabetes data into data frame
#1) Import the diabetes data available on Blackboard called diabetes-md into new data frame called my_data
getwd() #check where my working directory is so that I can save my .csv file there.
file.exists("diabetes-md.csv") #check whether it can find my file in the directory
my_data <- read.csv("diabetes-md.csv") # import my csv file into my_data dataframe
my_data #show my dataframe
#Lab practial 1 - Importing Diabetes data into data frame
#1) Import the diabetes data available on Blackboard called diabetes-md into new data frame called my_data
getwd() #check where my working directory is so that I can save my .csv file there.
file.exists("diabetes-md.csv") #check whether it can find my file in the directory
my_data <- read.csv("diabetes-md.csv") # import my csv file into my_data dataframe
my_data #show my dataframe
str(my_data) #show the structure of my_data dataframe
class(my_data) #show the class of my_data dataframe
colnames <- c("Patient name", "NI address", "Type", "Age", "Health status") #create a vector with the column names
colnames(my_data) <- colnames #apply the column names to my_data dataframe
head(my_data) #display first 5 rows, so that we can check that the column names have changed.
#3) Refactor diabetes type and status attributes
TypeCategory <- factor(my_data$Type, order = TRUE, levels = c("Type 1", "Type 2")) #refactor type1 and type2 sorting them from lower to higher levels
HealthStatusCategory <- factor(my_data$"Health status", order = TRUE, levels = c("Poor", "Improved", "Excellent")) #refactor health status from lower to higher levels
head(TypeCategory) #check Levels to see if they are ordered from lower to higher
head(HealthStatusCategory) #check levels to see if they are ordered from lower to higher
#4) Create a copy of the Patient name attribute into a data frame called patient_names. Show the first 10 names contained in patient_names
patient_names <- my_data$`Patient name` # copy the names from Patient name attribute and save them in patient_names
class(patient_names) #check that patient_names is class data.frame
head(patient_names, 10) # show the first 10 names in patient_names
#Lab practial 1 - Importing Diabetes data into data frame
#1) Import the diabetes data available on Blackboard called diabetes-md into new data frame called my_data
getwd() #check where my working directory is so that I can save my .csv file there.
file.exists("diabetes-md.csv") #check whether it can find my file in the directory
my_data <- read.csv("diabetes-md.csv") # import my csv file into my_data dataframe
my_data #show my dataframe
#2) show the structure and class type of my_data and configure the neames of the attributes to: Patient name, NI address, Type, Age, Health status.
str(my_data) #show the structure of my_data dataframe
class(my_data) #show the class of my_data dataframe
colnames <- c("Patient name", "NI address", "Type", "Age", "Health status") #create a vector with the column names
colnames(my_data) <- colnames #apply the column names to my_data dataframe
head(my_data) #display first 5 rows, so that we can check that the column names have changed.
#3) Refactor diabetes type and status attributes
TypeCategory <- factor(my_data$Type, order = TRUE, levels = c("Type 1", "Type 2")) #refactor type1 and type2 sorting them from lower to higher levels
HealthStatusCategory <- factor(my_data$"Health status", order = TRUE, levels = c("Poor", "Improved", "Excellent")) #refactor health status from lower to higher levels
head(TypeCategory) #check Levels to see if they are ordered from lower to higher
head(HealthStatusCategory) #check levels to see if they are ordered from lower to higher
#4) Create a copy of the Patient name attribute into a data frame called patient_names. Show the first 10 names contained in patient_names
patient_names <- my_data$`Patient name` # copy the names from Patient name attribute and save them in patient_names
class(patient_names) #check that patient_names is class data.frame
head(patient_names, 10) # show the first 10 names in patient_names
patient_names <- data.frame(my_data$`Patient name`) # copy the names from Patient name attribute and save them in patient_names
class(patient_names) #check that patient_names is class data.frame
head(patient_names, 10) # show the first 10 names in patient_names
#5) Count missing values in data frame my_data, and count this.
length(my_data[my_data == '']) #count missing values in the data frame
#6) I'm replacing the missing values in my_data dataframe and then removing the rows with NA values.
my_data[my_data == ''] <- NA #replace all empty fields with NA
my_data <- na.omit(my_data) #keep all the records with no empty cells or NA's and overwrite my data with all records with no empty cells
nrow(my_data) #count how many records are left.
my_data #show the records that are left.
#Lab practial 1 - Importing Diabetes data into data frame
#1) Import the diabetes data available on Blackboard called diabetes-md into new data frame called my_data
getwd() #check where my working directory is so that I can save my .csv file there.
file.exists("diabetes-md.csv") #check whether it can find my file in the directory
my_data <- read.csv("diabetes-md.csv") # import my csv file into my_data dataframe
my_data #show my dataframe
#2) show the structure and class type of my_data and configure the neames of the attributes to: Patient name, NI address, Type, Age, Health status.
str(my_data) #show the structure of my_data dataframe
class(my_data) #show the class of my_data dataframe
colnames <- c("Patient name", "NI address", "Type", "Age", "Health status") #create a vector with the column names
colnames(my_data) <- colnames #apply the column names to my_data dataframe
head(my_data) #display first 5 rows, so that we can check that the column names have changed.
#3) Refactor diabetes type and status attributes
TypeCategory <- factor(my_data$Type, order = TRUE, levels = c("Type 1", "Type 2")) #refactor type1 and type2 sorting them from lower to higher levels
HealthStatusCategory <- factor(my_data$"Health status", order = TRUE, levels = c("Poor", "Improved", "Excellent")) #refactor health status from lower to higher levels
head(TypeCategory) #check Levels to see if they are ordered from lower to higher
head(HealthStatusCategory) #check levels to see if they are ordered from lower to higher
#4) Create a copy of the Patient name attribute into a data frame called patient_names. Show the first 10 names contained in patient_names
patient_names <- data.frame(my_data$`Patient name`) # copy the names from Patient name attribute and save them in patient_names
class(patient_names) #check that patient_names is class data.frame
head(patient_names, 10) # show the first 10 names in patient_names
#5) Count missing values in data frame my_data, and count this.
length(my_data[my_data == '']) #count missing values in the data frame
#6) I'm replacing the missing values in my_data dataframe and then removing the rows with NA values.
my_data[my_data == ''] <- NA #replace all empty fields with NA
my_data <- na.omit(my_data) #keep all the records with no empty cells or NA's and overwrite my data with all records with no empty cells
nrow(my_data) #count how many records are left.
my_data #show the records that are left.
my_data[rowSums(is.na(data)) == "",]
#6) I'm replacing the missing values in my_data dataframe and then removing the rows with NA values.
my_data[my_data == ''] <- NA #replace all empty fields with NA
my_data <- na.omit(my_data) #keep all the records with no empty cells or NA's and overwrite my data with all records with no empty cells
nrow(my_data) #count how many records are left.
my_data #show the records that are left.
vec1 <- c("Hockey", "Fooball", "Baseball", "Curling", "Rugby", "Hurling", "Basketball", "Tennis", "Cricket", "Lacrosse")
vec2 <- c(vec1, "Hockey", "Lacrosse", "Hockey", "Water Polo", "Hockey", "Lacrosse")
vec2_factor <- as.factor(vec2)
vec2_factor
x <- c(34, 56, 55, 87, NA, 4, 77, NA, 21, NA, 39)
length(is.na(x)) # counts items in the vector
sum(is.na(x)) # counts how many NA's
count(!is.na(x)) # doesn't work
sum(!is.na(x))
y <- is.na(x) # gives the true and falses in X
y
#Lecture
colnames <- c("Date", "Country", "Gender", "Age", "q1", "q2", "q3", "q4", "q5")
date_column <- c("2018-15-10", "2018-11-01", "2018-21-10", "2018-28-10", "2018-01-05")
country <- c("US", "US", "IRL", "IRL", "IRL")
gender <- c("M", "F", "F", "M", "F")
age <- c(32, 45, 25, 39, 99)
q1 <- c(5, 3, 3, 3, 2)
q2 <- c(4, 5, 5, 3, 2)
q3 <- c(5, 2, 5, 4, 1)
q4 <- c(5, 5, 5, NA, 2)
q5 <- c(5, 5, 2, NA, 1)
my_data <- data.frame(date_column, country, gender, age, q1, q2, q3, q4, q5)
colnames(my_data) <- colnames
my_data
head(my_data) # first 5 rows, tail is the last 5 rows
str(my_data)
my_data$Age[my_data$Age == 99] <- NA # check my data age column and if the column has 99 put NA
my_data
my_data$AgeCat[my_data$Age >= 45] <- "Elder"
my_data$AgeCat[my_data$Age >= 26 && my_data$Age <= 44] <- "Middle Aged"
my_data$AgeCat[my_data$Age <= 25] <- "Young"
my_data$AgeCat[is.na(my_data$Age)] <- "Elder"
my_data
#Recoding Variables
AgeCategory <- factor(my_data$AgeCat, order = TRUE, levels = c("Young", "Middle Aged", "Elder"))
AgeCategory
my_data$AgeCate <- AgeCategory
my_data
AgeCat <- factor(my_data$AgeCat, order = TRUE, levels = c("Young", "Middle Aged", "Elder"))
AgeCat
my_data$AgeCat <- AgeCat
my_data
x <- c(34, 56, 55, 87, NA, 4, 77, NA, 21, NA, 39)
length(is.na(x)) # counts items in the vector
sum(is.na(x)) # counts how many NA's
count(!is.na(x)) # doesn't work
sum(!is.na(x))
y <- is.na(x) # gives the true and falses in X
y
#Lecture
colnames <- c("Date", "Country", "Gender", "Age", "q1", "q2", "q3", "q4", "q5")
date_column <- c("2018-15-10", "2018-11-01", "2018-21-10", "2018-28-10", "2018-01-05")
country <- c("US", "US", "IRL", "IRL", "IRL")
gender <- c("M", "F", "F", "M", "F")
age <- c(32, 45, 25, 39, 99)
q1 <- c(5, 3, 3, 3, 2)
q2 <- c(4, 5, 5, 3, 2)
q3 <- c(5, 2, 5, 4, 1)
q4 <- c(5, 5, 5, NA, 2)
q5 <- c(5, 5, 2, NA, 1)
my_data <- data.frame(date_column, country, gender, age, q1, q2, q3, q4, q5)
colnames(my_data) <- colnames
my_data
head(my_data) # first 5 rows, tail is the last 5 rows
str(my_data)
my_data$Age[my_data$Age == 99] <- NA # check my data age column and if the column has 99 put NA
my_data
my_data$AgeCat[my_data$Age >= 45] <- "Elder"
my_data$AgeCat[my_data$Age >= 26 && my_data$Age <= 44] <- "Middle Aged"
my_data$AgeCat[my_data$Age <= 25] <- "Young"
my_data$AgeCat[is.na(my_data$Age)] <- "Elder"
my_data
#Recoding Variables
AgeCat <- factor(my_data$AgeCat, order = TRUE, levels = c("Young", "Middle Aged", "Elder"))
AgeCat
my_data$AgeCat <- AgeCat
my_data
summary_col <- my_data$q1 + my_data$q2 + my_data$q3 + my_data$q4 + my_data$q5
summary_col
my_data <- data.frame(my_data, summary_col)
my_data
date_format <- "%b %d %Y"
today <- Sys.Date()
output_date <- format(today, format = date_format)
output_date
my_data
startdate <- as.Date("2004-02-13")
enddate <- as.Date("2018-01-22")
days <- enddate - startdate
days
today()
date()
date()dob <- as.Date("1973-08-30")
dob <- as.Date("1973-08-30")
diff_dates <- difftime(date - dob)
diff_dates
?difftime
date()
dob <- as.Date("1973-08-30")
diff_dates <- difftime(date, dob, = "days")
todays_date <- Sys.Date()
dob <- as.Date("1973-08-30")
diff_dates <- difftime(todays_date, dob, = "days")
diff_dates
todays_date <- Sys.Date()
dob <- as.Date("1973-08-30")
diff_dates <- difftime(todays_date, dob, units = "days")
diff_dates
diff_dates <- difftime(todays_date, dob, units = "weeks")
diff_dates
todays_date <- Sys.Date()
dob <- as.Date("1973-08-30")
diff_dates <- difftime(todays_date, dob, units = c("days",todays_date <- Sys.Date() dob <- as.Date("1973-08-30") diff_dates <- difftime(todays_date, dob, units = "weeks")
diff_dates
my_data
new_data <- my_data[order(my_data$Age),]
new_data
attach(my_data)
str(my_data$Age)
str(my_data$Gender)
new_data <- my_data[order(Gender, Age),]
new_data
new_data <- na.omit(my_data)
complete_data <- complete.cases(my_data)
complete_data
new_data <- na.omit(my_data) # listwise deletion
new_data
complete_data <- complete.cases(my_data)
complete_data
complete_data <- my_data(complete.cases, my_data)
library(swirl)
install_course_zip("c:/swirl_courses-master.zip", multi = TRUE, which_course = "R Programming")
swirl()
swirl()
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
inf - inf
Inf - Inf
my_data$Date <- as.Date(my_data$Date, "%d/%m/%Y")
startdate <- as.Date("2018-01-01")
enddate <- as.Date("2018-01-31")
new_data <- my_data[which(my_data$Date >= startdate & my_data$Date <= enddate),]
new_data
my_data$Date <- as.Date(my_data$Date, "%d/%m/%Y")
startdate <- as.Date("2018-01-01")
enddate <- as.Date("2018-01-31")
new_data <- my_data[which(my_data$Date >= startdate & my_data$Date <= enddate),]
new_data
YYmy_data$Date <- as.Date(my_data$Date, "%Y/%m/%d")
startdate <- as.Date("2018-01-01")
my_data$Date <- as.Date(my_data$Date, "%Y/%m/%d")
startdate <- as.Date("2018-01-01")
enddate <- as.Date("2018-01-31")
new_data <- my_data[which(my_data$Date >= startdate & my_data$Date <= enddate),]
new_data
head(new_data)
new_data <- subset(my_data, Gender == M ¦ age >= 24, select = c(Gender, Age, q1, q2, q3, q4))
new_data
new_data <- subset(my_data, Gender == M | age >= 24, select = c(Gender, Age, q1, q2, q3, q4))
new_data
head(new_data)
attach(my_data)
new_data <- subset(my_data, Gender == M | age >= 24, select = c(Gender:q4))
new_data
new_data
attach(my_data)
new_data <- subset(my_data, Age >= 35 | Age < 24, select = c(Q1, Q2, Q3, Q4))
new_data
head(new_data)
attach(my_data)
new_data <- subset(my_data, Gender == M | age >= 24, select = c(Gender:q4))
new_data
new_data <- subset(my_data, Gender = M | age >= 24, select = c(Gender:q4))
new_data
new_data
library(swirl)
install_course_zip("c:/swirl_courses-master.zip", multi = TRUE, which_course = "R Programming")
swirl()
Sys.Date()
mean(c(2, 4, 5))
add_two_numbers <- function(no1, no2) {     result = no1 + no2     return(result) }
add_two_numbers <- function(no1, no2) {     result = no1 + no2     return(result) }
result
add_two_numbers <- function(no1, no2) {     result = no1 + no2     return(result) }
add_two_numbers <- function(no1, no2) {     result = no1 + no2     return(result) }
add_two_numbers <- function(no1, no2) {     result = no1 + no2     return(result) }
result <- add_two_numbers(2, 4)
result
add_two_numbers <- function(no1, no2, n3 = 10) {     result = no1 + no2 + no3     return(result) }
result <- add_two_numbers(2, 4)
result
add_two_numbers <- function(no1, no2, no3 = 10) {     result = no1 + no2 + no3     return(result) }
add_two_numbers <- function(no1, no2, no3 = 10) {     result = no1 + no2 + no3     return(result) }
add_two_numbers <- function(no1, no2, no3 = 10) {     result = no1 + no2 + no3     return(result) }
result <- add_two_numbers(2, 4)
result
temp <- read.csv("c:/lotto/1999.csv")
str(temp)
head(temp)
csv_file_list <- list.files(path = "c:/lotto", pattern = "*.csv")
csv_file_list
temp <- read.csv("c:/lotto/1999.csv")
str(temp)
head(temp)
csv_file_list <- list.files(path = "c:/lotto", pattern = "*.csv")
csv_file_list
result <- add_two_numbers(2, 4)
result
#lotto exercise
temp <- read.csv("c:/lotto/1999.csv")
str(temp)
head(temp)
csv_file_list <- list.files(path = "c:/lotto", pattern = "*.csv")
csv_file_list
combined_results <- function(csv_file_list) {     for (list in csv_file_list) {         get(list, csv_file_list, header = TRUE) -> my_data_lotto         }     result(my_data_lotto) }
my_data_lotto
combine_results <- function(file_list) {     lotto_data <- NULL     for (csv_file in file_list) {         lotto_data <- read.csv(header = TRUE, paste("c:/lotto/", csv_file, sep = "", ), stringsAsFactors = FALSE)     }     return(lotto_data) }
lotto_data
combined_results <- function(file_list) {     lotto_data <- NULL     for (csv_file in file_list) {         lotto_data <- read.csv(header = TRUE, paste("c:/lotto/", csv_file, sep = "", ), stringsAsFactors = FALSE)     }     return(lotto_data) }
lotto_data <- combined_results(lotto_data)
lotto_data <- combined_results(csv_file_list)
combined_results <- function(file_list) {     lotto_data <- NULL     for (csv_file in file_list) {         lotto_data <- read.csv(header = TRUE, paste("c:/lotto/", csv_file, sep = "", ), stringsAsFactors = FALSE)     }     return(lotto_data) }
lotto_data <- combined_results(csv_file_list)
combined_results <- function(file_list) {     lotto_data <- NULL     for (csv_file in file_list) {         lotto_data <- read.csv(header = TRUE, paste("c:/lotto/", csv_file, sep = "", ), stringsAsFactors = FALSE)     }     return(lotto_data) }
temp <- read.csv("c:/lotto/1999.csv")
str(temp)
head(temp)
csv_file_list <- list.files(path = "c:/lotto", pattern = "*.csv")
csv_file_list
combined_results <- function(file_list) {     lotto_data <- NULL     for (csv_file in file_list) {         lotto_record <- read.csv(header = TRUE, paste("c:/lotto/", csv_file, sep = "",), stringsAsFactors = FALSE)         data_of_interest <- lotto_record[2:9]         lotto_data <- rbind(lotto_data, data_of_interest)     }     return(lotto_data) }
my_data <- combined_results(csv_file_list)
my_data
combined_results <- function(file_list) {     lotto_data <- NULL     for (csv_file in file_list) {         lotto_record <- read.csv(header = TRUE, paste("c:/lotto/", csv_file, sep = ""), stringsAsFactors = FALSE)         data_of_interest <- lotto_record[2:9]         lotto_data <- rbind(lotto_data, data_of_interest)     }     return(lotto_data) }
my_data <- combined_results(csv_file_list)
my_data
